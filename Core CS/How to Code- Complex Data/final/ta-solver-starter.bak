;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname ta-solver-starter) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #t #t none #f () #f)))
;; ta-solver-starter.rkt



;  PROBLEM 1:
;
;  Consider a social network similar to Twitter called Chirper. Each user has a name, a note about
;  whether or not they are a verified user, and follows some number of people.
;
;  Design a data definition for Chirper, including a template that is tail recursive and avoids
;  cycles.
;
;  Then design a function called most-followers which determines which user in a Chirper Network is
;  followed by the most people.
;

(define-struct user (name verified? following))
;; User is a (make-user String Boolean (listof User))
;; interp. A user of the social network- Chirper
;;         name is the user's name
;;         verified? represents if the user is verified
;;         following is the list of other users that the user follows

(define U1 (shared ((-A- (make-user "Aneesh" true (list -B-)))
                    (-B- (make-user "B" false (list ))))
             -A-))
                    
(define U2 (shared ((-A- (make-user "A" true (list -B-)))
                    (-B- (make-user "B" false (list -A-))))
             -A-))

(define U3 (shared ((-A- (make-user "A" true (list -B-)))
                    (-B- (make-user "B" false (list -C-)))
                    (-C- (make-user "B" false (list -A-))))
             -A-))
                    
                    
(define U4 (shared ((-A- (make-user "A" true (list -B- -C- -D-)))
                    (-B- (make-user "B" true (list -A-)))
                    (-C- (make-user "C" true (list -H- -E-)))
                    (-D- (make-user "D" true (list -A- -G-)))
                    (-E- (make-user "E" true (list -A-)))
                    (-F- (make-user "F" true (list -E- -H-)))
                    (-G- (make-user "G" true (list -H- -E-)))
                    (-H- (make-user "H" true (list -E-))))
             -A-))
                      
;<Template for structural recursion, encapsulated in local and with worklist accumulator
;              for tail recursion, and a context-preserving accumulator to avoid going in
;              cycles
#;
(define (fn-for-chirper u0)
  ; todo is (listof User); Worklist accumulator for tail recursion
  ; visited is (listof String); Context-preserving accumulator, stores names of users
  ;                             that have already been visited
  (local [(define (fn-for-user u todo visited)
            (; (user-name u)
             ;(user-verified? u)
             (if (member (user-name u) visited)
                 (fn-for-lou todo visited)
                 (fn-for-lou (append (user-following u) todo)
                             (cons (user-name u) visited)))))
          
          (define (fn-for-lou todo visited)
            (cond [(empty? todo) (...)]
                  [else (fn-for-user (first todo)
                                     (rest todo)
                                     visited)]))]

    (fn-for-user u0 empty empty)))

;; User -> User
;; Produce the user with the most number of followers
(check-expect (most-followers U1) (first (user-following U1)))
(check-expect (most-followers (shared ((-A- (make-user "A" true (list -B-)))
                                       (-B- (make-user "B" true (list -A- -C-)))
                                       (-C- (make-user "C" true (list -B-))))
                                -A-))
              (shared ((-A- (make-user "A" true (list -B-)))
                       (-B- (make-user "B" true (list -A- -C-)))
                       (-C- (make-user "C" true (list -B-))))
                -B-))
(check-expect (most-followers U4)
              (shared ((-A- (make-user "A" true (list -B- -C- -D-)))
                       (-B- (make-user "B" true (list -A-)))
                       (-C- (make-user "C" true (list -H- -E-)))
                       (-D- (make-user "D" true (list -A- -G-)))
                       (-E- (make-user "E" true (list -A-)))
                       (-F- (make-user "F" true (list -E- -H-)))
                       (-G- (make-user "G" true (list -H- -E-)))
                       (-H- (make-user "H" true (list -E-))))
                -E-))
              

;; (define (most-followers u0) u0) ;Stub

(define (most-followers u0)
  ; todo is (listof User); Worklist accumulator for tail recursion
  ; visited is (listof String); Context-preserving accumulator, stores names of users
  ;                             that have already been visited
  ; rsf is (listof UserNFollowers); Context-preserving accumulator, followers of the users visited
  ;                                 so far
  (local [(define-struct une (user followers))
          ;; UserNFollowers is a (make-une User Natural)
          ;; interp. The number of followers that a user has         

          (define (fn-for-user u todo visited rsf)
             ; (user-name u)
             ;(user-verified? u)
             (if (member (user-name u) visited)
                 (fn-for-lou todo visited rsf)
                 (fn-for-lou (append (user-following u) todo)
                             (cons (user-name u) visited)
                             (merge-user u rsf))))
          
          (define (fn-for-lou todo visited rsf)
            (cond [(empty? todo) rsf]
                  [else (fn-for-user (first todo)
                                     (rest todo)
                                     visited
                                     rsf)]))

          ;; User (listof UserNFollowers) -> (listof UserNFollowers)
          ;; Produce the list of UserNFollowers with the Room added
          (define (merge-user u rsf)
            (foldr merge-following rsf (user-following u)))

          ;; User (listof UserNFollowers) -> (listof UserNFollowers)

          (define (merge-following u loune)
            (cond [(empty? loune) (list (make-une u 1))]
                  [else (if (string=? (user-name u) (user-name (une-user (first loune))))
                            (cons (make-une u
                                            (add1 (une-followers (first loune))))
                                  (rest loune))
                            (cons (first loune)
                                  (merge-following u (rest loune))))]))

          (define (find-max loune)
            (une-user (foldr
                       (λ (u1 u2)
                         (if (> (une-followers u1) (une-followers u2))
                             u1
                             u2))
                       (first loune)
                       (rest loune))))]

    (find-max (fn-for-user u0 empty empty empty))))


;  PROBLEM 2:
;
;  In UBC's version of How to Code, there are often more than 800 students taking
;  the course in any given semester, meaning there are often over 40 Teaching Assistants.
;
;  Designing a schedule for them by hand is hard work - luckily we've learned enough now to write
;  a program to do it for us!
;
;  Below are some data definitions for a simplified version of a TA schedule. There are some
;  number of slots that must be filled, each represented by a natural number. Each TA is
;  available for some of these slots, and has a maximum number of shifts they can work.
;
;  Design a search program that consumes a list of TAs and a list of Slots, and produces one
;  valid schedule where each Slot is assigned to a TA, and no TA is working more than their
;  maximum shifts. If no such schedules exist, produce false.
;
;  You should supplement the given check-expects and remember to follow the recipe!



;; Slot is Natural
;; interp. each TA slot has a number, is the same length, and none overlap

(define-struct ta (name max avail))
;; TA is (make-ta String Natural (listof Slot))
;; interp. the TA's name, number of slots they can work, and slots they're available for

(define SOBA (make-ta "Soba" 2 (list 1 3)))
(define UDON (make-ta "Udon" 1 (list 3 4)))
(define RAMEN (make-ta "Ramen" 1 (list 2)))

(define NOODLE-TAs (list SOBA UDON RAMEN))



(define-struct assignment (ta slot))
;; Assignment is (make-assignment TA Slot)
;; interp. the TA is assigned to work the slot

;; Schedule is (listof Assignment)


;; ============================= FUNCTIONS

; ┌────────────────┬───────────────┬──────────────────────────┐
; │         listof │               │                          │
; │         TA     │               │                          │
; │                │     empty     │        (listof TA)       │
; │ listof Slots   │               │                          │
; ├────────────────┼───────────────┴──────────────────────────┤
; │                │                                          │
; │                │                                          │
; │      empty     │             empty                        │
; │                │                                          │
; ├────────────────┼───────────────┬──────────────────────────┤
; │                │               │                          │
; │                │     false     │ (listof (make-assignment │
; │  (Listof Slot  │               │          TA              │
; │                │               │          Slot))          │
; │                │               │  Natural Recusion        │
; └────────────────┴───────────────┴──────────────────────────┘

;; (listof TA) (listof Slot) -> Schedule or false
;; produce valid schedule given TAs and Slots; false if impossible

(check-expect (schedule-tas empty empty) empty)
(check-expect (schedule-tas empty (list 1 2)) false)
(check-expect (schedule-tas (list SOBA) empty) empty)

(check-expect (schedule-tas (list SOBA) (list 1)) (list (make-assignment SOBA 1)))
(check-expect (schedule-tas (list SOBA) (list 2)) false)
(check-expect (schedule-tas (list SOBA) (list 1 3)) (list (make-assignment SOBA 3)
                                                          (make-assignment SOBA 1)))

(check-expect (schedule-tas NOODLE-TAs (list 1 2 3 4))
              (list
               (make-assignment UDON 4)
               (make-assignment SOBA 3)
               (make-assignment RAMEN 2)
               (make-assignment SOBA 1)))

(check-expect (schedule-tas NOODLE-TAs (list 1 2 3 4 5)) false)


;;(define (schedule-tas tas slots) empty) ;stub

; Templating for: structural recursion of two one-of types
;                 encapsulated in a local

(define (schedule-tas tas slots)
  (cond [(empty? slots) empty]
        [(empty? tas) false]
        [else (... (first tas) (first slots)
                   (schedulae-tas (rest tas)
                                  (rest slots)))]))
